document.addEventListener('DOMContentLoaded', () => {


  // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–û –Ω–∞—Å" ---
  document.querySelectorAll('.section-fade').forEach(section => {
    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting) section.classList.add('visible');
    }, { threshold: 0.2 });
    observer.observe(section);
  });

  const toTopBtn = document.getElementById('to-top');
  window.addEventListener('scroll', () => {
    if (window.scrollY > 300) toTopBtn.classList.add('visible');
    else toTopBtn.classList.remove('visible');
  });
  toTopBtn.addEventListener('click', () => window.scrollTo({top:0, behavior:'smooth'}));

  const aboutLink = document.getElementById('about-link');
  const aboutModal = document.getElementById('about-modal');
  const closeBtn = document.querySelector('.close-btn');
  if (aboutLink && aboutModal && closeBtn) {
    aboutLink.addEventListener('click', (e) => {
      e.preventDefault();
      aboutModal.classList.add('show');
      document.body.style.overflow = 'hidden';
    });
    closeBtn.addEventListener('click', () => {
      aboutModal.classList.remove('show');
      document.body.style.overflow = '';
    });
    aboutModal.addEventListener('click', (e) => {
      if (e.target === aboutModal) {
        aboutModal.classList.remove('show');
        document.body.style.overflow = '';
      }
    });
  }
// --- –ê–Ω–∏–º–∞—Ü–∏—è —Ñ—Ä–∞–∑ –î–æ–∫—Ç–æ—Ä–∞ –õ–∏—Å–≤–∏ ---
const phraseText = document.getElementById('lisvy-phrase-text');
const phraseImg = document.getElementById('lisvy-phrase-img');
const sequence = [
  { text: '–°–ª–æ–≤–æ', img: '', pause: 1500 },
  { text: '', img: '', pause: 400 },
  { text: 'Rom', img: '', pause: 1500 },
  { text: '–ò –°–ª–æ–≤–æ', img: '', pause: 1000 },
  { text: '–°–º–µ—Ä—Ç—å', img: 'assets/Death.png', pause: 1500 },
  { text: '', img: '', pause: 400 },
  { text: '', img: 'assets/Death.png', pause: 1200 },
  { text: 'Rom', img: 'assets/Rom.png', pause: 1200 },
  { text: '', img: '', pause: 400 },
  { text: '', img: 'assets/Rom.png', pause: 1200 },
  { text: '–î–ª—è –≤–∞—Å –æ–∑–Ω–∞—á–∞–µ—Ç –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ', img: '', pause: 2000 }
];
let idx = 0;
let phraseTimeout = null;

function showPhrase() {
  const step = sequence[idx];

  // –°–Ω–∞—á–∞–ª–∞ –ø–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
  phraseText.classList.remove('visible');
  phraseImg.classList.remove('visible');

  // –ü–æ—Å–ª–µ transition (0.7-0.8s) –º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –ø–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
  setTimeout(() => {
    // –¢–µ–∫—Å—Ç
    if (step.text) {
      phraseText.textContent = step.text;
      phraseText.classList.add('visible');
    } else {
      phraseText.textContent = '';
    }
    // –ö–∞—Ä—Ç–∏–Ω–∫–∞
    if (step.img) {
      phraseImg.src = step.img;
      phraseImg.style.display = '';
      phraseImg.classList.add('visible');
    } else {
      phraseImg.style.display = 'none';
    }
  }, 400); // –∑–∞–¥–µ—Ä–∂–∫–∞ —á—É—Ç—å –º–µ–Ω—å—à–µ transition

  // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
  idx = (idx + 1) % sequence.length;
  clearTimeout(phraseTimeout);
  phraseTimeout = setTimeout(showPhrase, step.pause);
}

if (phraseText && phraseImg) showPhrase();


  // --- –ú–µ—Ç–µ–æ—Ä—ã ---
  const contactsSection = document.querySelector('.contacts');
  let meteorsStarted = false;
  function createMeteors() {
    const meteorCount = 25; // —É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    const meteorColors = [
      'rgba(88,101,242,0.9)',
      'rgba(230, 57, 70, 0.9)',
      'rgba(255, 255, 255, 0.8)',
    ];
    for (let i = 0; i < meteorCount; i++) {
      const meteor = document.createElement('span');
      meteor.classList.add('meteor');
      meteor.style.left = `${(i / meteorCount) * 100 + Math.random() * (100 / meteorCount)}%`;
      const duration = 2 + Math.random() * 1.5;
      meteor.style.setProperty('--duration', `${duration}s`);
      meteor.style.setProperty('--tail-length', `${80 + (3.5 - duration) * 40}px`);
      meteor.style.setProperty('--meteor-color', meteorColors[Math.floor(Math.random() * meteorColors.length)]);
      const controlX = 30 + Math.random() * 40;
      const controlY = 180 + Math.random() * 150;
      const endX = 80 + Math.random() * 40;
      const endY = 350 + Math.random() * 100;
      meteor.style.offsetPath = `path('M 0 0 Q ${controlX} ${controlY} ${endX} ${endY}')`;
      const delay = Math.random() * duration * meteorCount * 0.05;
      meteor.style.animationDelay = `${delay}s`;
      contactsSection.appendChild(meteor);
    }
  }
  function clearMeteors() {
    const meteors = contactsSection.querySelectorAll('.meteor');
    meteors.forEach(m => m.remove());
  }
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        if (!meteorsStarted) {
          meteorsStarted = true;
          createMeteors();
        }
      } else {
        meteorsStarted = false;
        clearMeteors();
      }
    });
  }, { threshold: 0.1 });
  observer.observe(contactsSection);

  // --- –ß–∞—Å—Ç–∏—Ü—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ ---
  const particleColors = {
    discord: 'rgba(88,101,242,0.7)',
    email: 'rgba(30,30,30,0.5)',
    apply: 'rgba(230, 57, 70, 0.7)',
  };
  const spawnIntervals = new WeakMap();
  function varyColor(color) {
    const rgba = color.match(/rgba?\((\d+), (\d+), (\d+), ([\d.]+)\)/);
    if (!rgba) return color;
    let r = parseInt(rgba[1]);
    let g = parseInt(rgba[2]);
    let b = parseInt(rgba[3]);
    let a = parseFloat(rgba[4]);
    const variation = 20;
    r = Math.min(255, Math.max(0, r + (Math.random() * variation - variation / 2)));
    g = Math.min(255, Math.max(0, g + (Math.random() * variation - variation / 2)));
    b = Math.min(255, Math.max(0, b + (Math.random() * variation - variation / 2)));
    return `rgba(${r}, ${g}, ${b}, ${a})`;
  }
  function spawnParticles(card) {
    if (spawnIntervals.get(card)) return;
    spawnIntervals.set(card, true);
    const type = card.classList.contains('discord') ? 'discord' :
                 card.classList.contains('email') ? 'email' :
                 card.classList.contains('apply') ? 'apply' : null;
    if (!type) return;
    const baseColor = particleColors[type];
    const count = 15 + Math.floor(Math.random() * 6);
    for (let i = 0; i < count; i++) {
      const p = document.createElement('span');
      p.classList.add('particle');
      const size = 2 + Math.random() * 4;
      p.style.width = `${size}px`;
      p.style.height = `${size}px`;
      p.style.backgroundColor = varyColor(baseColor);
      const x = Math.random() * card.clientWidth;
      const y = Math.random() * card.clientHeight;
      p.style.left = `${x}px`;
      p.style.top = `${y}px`;
      card.appendChild(p);
      const angle = Math.random() * 2 * Math.PI;
      const distance = 20 + Math.random() * 20;
      const duration = 1300;
      p.style.transition = `transform ${duration}ms ease-out`;
      requestAnimationFrame(() => {
        p.style.transform = `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px) scale(0.5)`;
        p.style.opacity = '0';
      });
      setTimeout(() => p.remove(), duration);
    }
    setTimeout(() => spawnIntervals.delete(card), 300);
  }
  document.querySelectorAll('.contact-card').forEach(card => {
    card.addEventListener('mouseenter', () => {
      spawnParticles(card);
    });
  });



// --- –ó–≤—É–∫ ---
const smokeSound = document.getElementById("audio-smoke");
const sparkSound = document.getElementById("audio-spark");
const metalSounds = [
  document.getElementById("metal-hit-1"),
  document.getElementById("metal-hit-2"),
  document.getElementById("metal-hit-3"),
  document.getElementById("metal-hit-4")
];
const toggleBtn = document.getElementById("toggle-sound");
const welcomeBtn = document.getElementById("welcome-close-btn");
let isMuted = localStorage.getItem("sound-muted") === "true";
let soundStarted = false;

// –ì—Ä–æ–º–∫–æ—Å—Ç–∏
smokeSound.volume = 0.5;
sparkSound.volume = 0.6;
metalSounds.forEach((sound, i) => {
  sound.volume = (i === 3) ? 0.15 : 0.9;
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ç–æ—Å—Ç–∞
function showToast(message, duration = 4000) {
  const container = document.getElementById("toast-container");
  if (!container) return;

  const toast = document.createElement("div");
  toast.className = "toast-message show";
  toast.textContent = message;
  container.appendChild(toast);

  setTimeout(() => {
    toast.classList.remove("show");
    toast.classList.add("hide");
  }, duration);

  toast.addEventListener("animationend", (e) => {
    if (e.animationName === "toastOut") toast.remove();
  });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∑–≤—É–∫–æ–≤
function startSounds() {
  if (soundStarted || isMuted) return;
  smokeSound.loop = true;
  smokeSound.play().catch(() => {});
  soundStarted = true;

  setInterval(() => {
    if (isMuted) return;
    sparkSound.currentTime = 0;
    sparkSound.play().catch(() => {});
  }, Math.random() * 3000 + 3000);

  setInterval(() => {
    if (isMuted) return;
    const rand = Math.floor(Math.random() * metalSounds.length);
    metalSounds[rand].currentTime = 0;
    metalSounds[rand].play().catch(() => {});
  }, Math.random() * 4000 + 4000);

  showToast("üîä –ó–≤—É–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KONG.", 5000);
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∑–≤—É–∫–∞ (–∫–Ω–æ–ø–∫–∞ üîá/üîä)
toggleBtn.addEventListener("click", () => {
  isMuted = !isMuted;
  smokeSound.muted = isMuted;
  sparkSound.muted = isMuted;
  metalSounds.forEach((s) => (s.muted = isMuted));
  toggleBtn.textContent = isMuted ? "üîá" : "üîä";
  localStorage.setItem("sound-muted", isMuted);

  showToast(isMuted ? "üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á—ë–Ω" : "üîä –ó–≤—É–∫ –≤–∫–ª—é—á—ë–Ω", 3500);

  if (isMuted) {
    localStorage.setItem("sound-reminder-date", new Date().toISOString().slice(0, 10));
  } else {
    localStorage.removeItem("sound-reminder-date");
  }
  // üí° –í–ê–ñ–ù–û: –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–≤—É–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏
  if (!soundStarted && !isMuted) {
    startSounds();
  }
});

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
smokeSound.muted = isMuted;
sparkSound.muted = isMuted;
metalSounds.forEach((s) => (s.muted = isMuted));
toggleBtn.textContent = isMuted ? "üîá" : "üîä";

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–≤—É–∫–µ
const lastReminded = localStorage.getItem("sound-reminder-date");
const today = new Date().toISOString().slice(0, 10);
if (isMuted && lastReminded !== today) {
  showToast("üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á—ë–Ω. –ù–∞–∂–º–∏—Ç–µ üîä –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å.", 6000);
  localStorage.setItem("sound-reminder-date", today);
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ "–ü–æ–Ω—è–ª"
if (welcomeBtn) {
  welcomeBtn.addEventListener("click", () => {
    // –ü—Ä—è—á–µ–º –æ–∫–Ω–æ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É–±—Ä–∞–Ω–æ)
    document.getElementById("welcome-modal")?.classList.add("hidden");

    // –°—Ç–∞—Ä—Ç—É–µ–º –∑–≤—É–∫–∏
    startSounds();
  });
}
});



  const textContainer = document.getElementById("typewriter-text");
  const typingSound = new Audio("audio/keyboard.mp3"); // –ó–∞–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
  typingSound.volume = 0.6;

  const rawHtml = `–ú—ã –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–ª–∞–Ω, –Ω–∞—Ü–µ–ª–µ–Ω–Ω—ã–π –Ω–∞ —Ç–æ–ø –ü–í–ü –∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥.<br> 
  –£ –Ω–∞—Å —Ç—ë–ø–ª–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ø–æ—á—Ç–∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω –∏ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, —Å –∫–µ–º –ø–æ–∏–≥—Ä–∞—Ç—å –≤ STALCRAFT.<br><br> 
  –ì–ü ‚Äî —ç—Ç–æ –Ω–µ –≤–µ—Å—å –∫–ª–∞–Ω, –∞ –ª–∏—à—å –µ–≥–æ —á–∞—Å—Ç—å, –æ—Ç–æ–±—Ä–∞–Ω–Ω–∞—è –¥–ª—è –ö–í. –ú—ã –∏—â–µ–º —Ç–µ—Ö, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω 7/7 –∏ —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∏–≥—Ä—É.<br><br> 
  –ù–∞—à–∏ –≥–∏–ª—å–∑—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã: –æ—Ç 5000 –≤ –Ω–µ–¥–µ–ª—é. <br><br> 
  –•–æ—á–µ—à—å –∫ –Ω–∞–º? –ü—Ä–æ—Å—Ç–æ –∑–∞—Ö–æ–¥–∏ –≤ –¥–∏—Å–∫–æ—Ä–¥ –∏ –æ—Å—Ç–∞–≤–ª—è–π —Ç–∏–∫–µ—Ç, –∏–ª–∏ –∏–≥—Ä–∞–π —Å –Ω–∞–º–∏ –≤–Ω–µ –ì–ü. <br><br> 
  <b>P.S.</b> –ß–°–í—à–Ω–∏–∫–æ–≤ –∏ —Ç–æ–∫—Å–∏–∫–æ–≤ –∏–∑ –∫–ª–∞–Ω-–Ω—å—é—Å —Å—Ä–∞–∑—É –ª–µ—Å–æ–º üö´`;

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ + HTML —Ç–µ–≥–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
  const parts = [];
  const regex = /(<[^>]+>)|([^<])/g;
  let match;
  while ((match = regex.exec(rawHtml))) {
    if (match[1]) parts.push(match[1]); // —Ç–µ–≥
    else if (match[2]) parts.push(match[2]); // —Å–∏–º–≤–æ–ª
  }

  const totalDuration = 15000; // 15 —Å–µ–∫—É–Ω–¥
  const delay = totalDuration / parts.length;

  let i = 0;
  function type() {
    if (i === 0) {
      typingSound.currentTime = 0;
      typingSound.play().catch(() => {});
    }

    if (i < parts.length) {
      textContainer.innerHTML += parts[i++];
      setTimeout(type, delay);
    } else {
      typingSound.pause();
      typingSound.currentTime = 0;
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (textContainer) {
    textContainer.innerHTML = "";
    type();
  }



document.querySelectorAll('.achievement-card').forEach(card => {
  card.addEventListener('click', function(e) {
    // –°–Ω–∏–º–∞–µ–º active —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.achievement-card.active').forEach(c => c.classList.remove('active'));
    // –î–µ–ª–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ–π
    this.classList.add('active');
  });
  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ —É—Ö–æ–¥–µ –º—ã—à–∏:
  card.addEventListener('mouseleave', function(e) {
    this.classList.remove('active');
  });
});
  // –≠—Ñ—Ñ–µ–∫—Ç "—Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç" –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å–µ–∫—Ü–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const achievementsGrid = document.querySelector('.achievements-grid');
  const achievementsSection = document.querySelector('.achievements');
  if (achievementsGrid && achievementsSection) {
    achievementsSection.addEventListener('mouseenter', () => {
      achievementsGrid.classList.add('reveal');
    });
    achievementsSection.addEventListener('mouseleave', () => {
      achievementsGrid.classList.remove('reveal');
    });
  }
  // --- –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ---
const cards = document.querySelectorAll('.contact-card');
let index = 0;
let arrowInterval = null;

function setActiveCard(idx) {
  cards.forEach((card, i) => {
    if (i === idx) card.classList.add('active');
    else card.classList.remove('active');
  });
}

function startArrowAnimation() {
  if (arrowInterval) clearInterval(arrowInterval);

  if (window.innerWidth > 2000) {
    index = 0; // –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
    setActiveCard(index);
    arrowInterval = setInterval(() => {
      index = (index + 1) % cards.length;
      setActiveCard(index);
    }, 3000);
  } else {
    index = 0;
    setActiveCard(0);
  }
}

startArrowAnimation();
window.addEventListener('resize', startArrowAnimation);


document.addEventListener("DOMContentLoaded", () => {
  const welcomeModal = document.getElementById("welcome-modal");
  const welcomeBtn = document.getElementById("welcome-close-btn");

  if (!welcomeModal || !welcomeBtn) return;

  let countdown = 15;
  welcomeBtn.textContent = `–ü–æ–Ω—è–ª (${countdown})`;
  welcomeBtn.disabled = true;

  const interval = setInterval(() => {
    countdown--;
    if (countdown <= 0) {
      clearInterval(interval);
      welcomeBtn.disabled = false;
      welcomeBtn.textContent = "–ü–æ–Ω—è–ª";
    } else {
      welcomeBtn.textContent = `–ü–æ–Ω—è–ª (${countdown})`;
    }
  }, 1000);

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É
  welcomeModal.classList.remove("hidden");
  document.body.style.overflow = "hidden";

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  welcomeBtn.addEventListener("click", () => {
    welcomeModal.classList.add("hidden");
    document.body.style.overflow = "";
  });

  
});